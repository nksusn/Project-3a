version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  test-backend:
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - run:
          name: Install Backend Dependencies
          command: |
            cd application/backend
            npm install
      - run:
          name: Run Backend Tests
          command: |
            cd application/backend
            npm test
      - store_artifacts:
          path: application/backend/coverage

  test-frontend:
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - run:
          name: Install Frontend Dependencies
          command: |
            cd application/frontend
            npm install
      - run:
          name: Run Frontend Tests
          command: |
            cd application/frontend
            npm test -- --coverage --watchAll=false
      - store_artifacts:
          path: application/frontend/coverage

  build-and-push:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and Push Application Images
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            
            # Create image tag with branch, date and git SHA
            BRANCH=$(echo $CIRCLE_BRANCH | sed 's/[^a-zA-Z0-9]/-/g')
            DATE=$(date +"%Y%m%d")
            SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)
            IMAGE_TAG="${BRANCH}-${DATE}-${SHA}"
            
            # Build and push backend image
            cd application/backend
            docker build -t $DOCKER_USERNAME/nebulance-app:backend-$IMAGE_TAG .
            docker push $DOCKER_USERNAME/nebulance-app:backend-$IMAGE_TAG
            
            # Build and push frontend image
            cd ../frontend
            docker build -t $DOCKER_USERNAME/nebulance-app:frontend-$IMAGE_TAG .
            docker push $DOCKER_USERNAME/nebulance-app:frontend-$IMAGE_TAG
            
            # Save image tag for deployment
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
            echo $IMAGE_TAG > /tmp/image_tag.txt
      - persist_to_workspace:
          root: /tmp
          paths:
            - image_tag.txt

  deploy-to-eks:
    docker:
      - image: cimg/aws:2023.09
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Deploy to EKS
          command: |
            aws eks update-kubeconfig --region eu-central-1 --name eks-nebulance
            
            # Use image tag from build job
            IMAGE_TAG=$(cat /tmp/image_tag.txt)
            
            # Update Helm values with new images
            sed -i "s|repository: hilltopconsultancy/neb-frontend|repository: $DOCKER_USERNAME/nebulance-app|g" helm-charts/values.yaml
            sed -i "s|repository: hilltopconsultancy/neb-backend|repository: $DOCKER_USERNAME/nebulance-app|g" helm-charts/values.yaml
            sed -i "s|tag: \"frontend-v1\"|tag: \"frontend-$IMAGE_TAG\"|g" helm-charts/values.yaml
            sed -i "s|tag: \"backend-v1\"|tag: \"backend-$IMAGE_TAG\"|g" helm-charts/values.yaml
            
            # Commit updated values.yaml back to repo if changes exist
            if ! git diff --quiet helm-charts/values.yaml; then
              git config user.email "forchu.cha@gmail.com"
              git config user.name "CircleCI"
              git remote set-url origin https://$GITHUB_TOKEN@github.com/CHAFAH/project-3.git
              git add helm-charts/values.yaml
              git commit -m "Update image tags to $IMAGE_TAG [skip ci]"
              git push origin $CIRCLE_BRANCH
            fi
            
            # Create namespace if it doesn't exist
            kubectl create namespace nebulance-app --dry-run=client -o yaml | kubectl apply -f -
            
            # Deploy with Helm
            helm upgrade --install nebulance-app helm-charts/ \
              --namespace nebulance-app \
              --set secrets.enabled=true \
              --timeout 10m

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - test-backend
      - test-frontend
      - build-and-push:
          requires:
            - test-backend
            - test-frontend
          filters:
            branches:
              only:
                - main
                - develop
      - deploy-to-eks:
          requires:
            - build-and-push
          filters:
            branches:
              only: main